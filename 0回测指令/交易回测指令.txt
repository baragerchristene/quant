工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

工作任务：
一、注意事项：
1.尽量使用向量化计算，避免使用if语句和for循环，避免频繁使用解释器导致效率降低
2.从mongodb数据库读取所有ETF日k数据，按照'代码'分组同时对每个小组进行分析,用apply的方式提高分析速度
3.所有的MACD数据在数据库当中已经包含，不需要你再次计算
4.直接给我完整代码
二、规则说明

买入规则：

如果某个标的同时满足以下条件则认为可以买入：
1.该标的macd金叉（前两日为负值，前一日为正值）（多头趋势加强）
这里需要注意的是
另外，一定要把每个标的前三天跳开，避免算到最后一天，产生误差
2.该标的当日开盘价大于1.1、且低于前一日最高价、且高于前一日最低价（不受消息面影响）

买入时产生以下动作：
输出买入信息到名为'mairu'的数据库表中，包含买入标的的‘代码’、买入日期、买入价格（当日收盘价）、买入量（前一日该标的交易量的千分之一）、交易总磨损（综合滑点等因素设置为千分之二）

卖出规则：
1.读取'mairu'操作产生的数据库表，理论上在每一个标的买入后的第二天卖出；但是如果应卖出时间的开盘价低于前日最低价则当日不卖出，改为下一日卖出，以此类推；

卖出时产生以下动作：
输出卖出信息到名为'maichu'的数据库表中，包含对应的'mairu'操作产生的买入数据，以及卖出日期、卖出价格（当日收盘价）、卖出量（全部持仓）、交易总磨损（综合滑点等因素设置为千分之二），
以及收益率，即（卖出价-交易总磨损/买入价+交易总磨损）-1

三、参考资料：
1.连接MongoDB数据库的方式如下所示：
client = MongoClient(
    'mongodb: //wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000')
db = client['wth000']
collection = db['etf指标']

2。将数据添加到新建的数据表中的语法如下所示：
# 将DataFrame中的缺失值去除
df = df.dropna()
# 连接MongoDB数据库并创建新表
new_collection = db['1hBTC指标']
records = df.to_dict("records")  # 将DataFrame转换为字典
new_collection.insert_many(records)  # 插入数据到MongoDB数据库中的新的集合中

3。etf指标数据库表中的数据存储格式如下所示：
// 1
{
    "_id": ObjectId("641fb29ab4d5e15caf553554"),
    "日期": "2014-12-04",
    "开盘": 99.999,
    "收盘": 100,
    "最高": 100.001,
    "最低": 99.998,
    "成交量": NumberInt("22681"),
    "成交额": 226809108,
    "振幅": 0,
    "涨跌幅": 0,
    "涨跌额": 0,
    "换手率": 8.14,
    "代码": NumberInt("159001"),
    "ATR": 0.0462684237724175,
    "RSI": 53.6898583801161,
    "MACD": -0.00278144561912086,
    "MACDsignal": -0.015642732268996,
    "MACDhist": 0.0128612866498751,
    "KDJ_K": 99.7727272727262,
    "KDJ_D": 99.621212121211,
    "KDJ_J": 100.075757575757,
    "OBV": 17679,
    "wr": -0.227272727273814,
    "slowk": 97.4803988733998,
    "slowd": 98.3829035834163,
    "mom": 0,
    "SMA": 99.9802333333333,
    "EMA": 99.9848818927417,
    "UpperBB": 100.124792837556,
    "MiddleBB": 99.96895,
    "LowerBB": 99.8131071624438,
    "MSR": 0.00077945620893393