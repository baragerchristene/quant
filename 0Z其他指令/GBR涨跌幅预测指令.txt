工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在
此外，你在从数据库获得数据后，习惯性添加一句print（'已经从数据库获取数据'），以方便测试

工作任务：
1.读取mongodb数据库中名为['stock前复权指标']的数据集合里各个指标；
2.提取其中的数值类型数据,并进行Z-Score标准化方法进行归一化处理,随后将原始数据中的预测值与其拼接
3.使用spearman进行相关系数分析，并j将各个指标及其相关系数分析的情况输出到一个名为'相关系数'的数据集合当中；
3.对拼接后的指标使用可以在线学习的GradientBoostingRegressor模型，预测下一日至下二十日的涨跌幅情况,并生成名为“GBDT模型”的预测模型；
4.将预测的未来具体某天的实际涨跌幅情况，写进入一个名为'预测结果'的数据集合中；
5.对预测结果进行偏离分析,并将偏离的情况输出到名为'偏离程度'的数据集合当中.

特殊要求：
1.预测模型应当能够实现在线学习，即每晚五点我的程序自动将把最新数据更新进入数据库，,而你将根据我指定的数据库对模型进行动态的学习和保存,并输出下一日的预测结果

参考资料：

from sklearn.kernel_approximation import RBFSampler
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import pandas as pd
from pymongo import MongoClient
# 链接mongodb数据库
client = MongoClient(
    'mongodb://wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000')
db = client['wth000']
collection = db['stock前复权指标']
df = pd.DataFrame(list(collection.find()))
print('数据获取成功')

# 提取数值类型数据
numerical_cols = df.select_dtypes(include=[np.number]).columns.tolist()
df_numerical = df[numerical_cols]

# 对数值类型数据进行 Z-Score 标准化
df_normalized = (df_numerical - df_numerical.mean()) / df_numerical.std()

# 显示处理后的数据
print(df_normalized.head())

# 设置预测值(如n日后涨幅和价格)
n = 2
df_normalized['涨跌幅预测值GBDT'] = df['收盘'].pct_change(n).shift(-n)*100
df_normalized['价格预测值SVR']=df['收盘'].shift(-n)
# 输出拼接后的数据到名为'拼接指标'的数据集合中
db['stock归一化指标'].insert_many(df_normalized.to_dict('records'))

# 计算相关系数,第一个参数是相关性分析的方法,第二个参数是只计算数字列
corr_df = df_normalized.corr(method='spearman', numeric_only=True)

# 将相关系数数据保存到名为'相关系数'的数据集合中
corr_dict = corr_df.to_dict('index')
for col, value in corr_dict.items():
    value['_id'] = col
    db['stock相关系数'].insert_one(value)



# 连接MongoDB数据库
client = MongoClient(
    'mongodb://wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000')
db = client['wth000']
collection = db['stock前复权指标']
df = pd.DataFrame(list(collection.find()))
print('数据获取成功')

# 偏离分析
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error
df = pd.DataFrame(list(cursor))# 构建数据集
grouped = df.groupby(['代码'])# 数据分组
print("平均绝对百分比误差MAPE: %.10f" %
      mean_absolute_percentage_error(df['True values'], df['Predicted values']))
print("平均平方误差MSE: %.10f" % mean_squared_error(
    df['True values'], df['Predicted values']))
print("R平方分数:越接近1特征集相关性越好: %.10f" % r2_score(
    df['True values'], df['Predicted values']))

二、数据结构：
{
    "_id": ObjectId("641d2e6e2b36117a3d378aa4"),
    "timestamp": NumberLong("1503543600000"),
    "open": "4146.97000000",
    "high": "4163.59000000",
    "low": "4085.01000000",
    "close": "4113.58000000",
    "volume": "35.01263400",
    "close_time": NumberLong("1503547199999"),
    "quote_asset_volume": "144328.52252791",
    "number_of_trades": NumberInt("184"),
    "taker_buy_base_asset_volume": "11.99035000",
    "taker_buy_quote_asset_volume": "49611.94877027",
    "ignore": "0",
    "开盘": 4146.97,
    "最高": 4163.59,
    "最低": 4085.01,
    "收盘": 4113.58,
    "成交量": 35.012634,
    "日期": "2017-08-24 03:00:00",
    "标准时间间隔": NumberInt("601200"),
    "4日后总涨跌幅（未来函数）": 0.966068485358251,
    "SMA4成交量": 30.8800375,
    "SMA4成交量比值": 1.13382744434815,
    "SMA4收盘": 4129.3525,
    "SMA4收盘比值": 0.996180393899528,
    "SMA4开盘": 4141.9625,
    "SMA4开盘比值": 1.0012089679711,
    "SMA4最高": 4179.42250000001,
    "SMA4最高比值": 0.996211797204038,
    "SMA4最低": 4111.2275,
    "SMA4最低比值": 0.993622950809705,
    "EMA4成交量": 30.8800375,
    "EMA4成交量比值": 1.13382744434815,
    "EMA4收盘": 4129.3525,
    "EMA4收盘比值": 0.996180393899528,
    "EMA4开盘": 4141.9625,
    "EMA4开盘比值": 1.0012089679711,
    "EMA4最高": 4179.42250000001,
    "EMA4最高比值": 0.996211797204038,
    "EMA4最低": 4111.2275,
    "EMA4最低比值": 0.993622950809705,
    "MACD[12.26.9]": -0.202709047085461,
    "MACDsignal[12.26.9]": -0.195380799394456,
    "MACDhist[12.26.9]": -0.00732824769100504,
    "KDJ_K[9.3.0.3.0]": 75.7650818327071,
    "KDJ_D[9.3.0.3.0]": 67.8048429102564,
    "KDJ_J[9.3.0.3.0]": 91.6855596776084
}
