工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

一、注意事项：
1.尽量使用向量化计算，避免使用if语句和for循环，避免频繁使用解释器导致效率降低
2.所有的数据在数据库当中已经包含，不需要再次计算
3.直接给我完整代码
4.可以使用参考资料，但是不一定准确，请你批判的使用
二、规则说明
1.当当天所有股票['EMA121开盘比值']的乘积大于1.1的时候执行牛市策略；
当当天所有股票['EMA121开盘比值']的乘积小于0.9的时候执行熊市策略；其他时间执行震荡策略，要求每日单独执行单独的策略，互相之间不要干扰
2.注意事项:最开始遍历的日期也不应该是固定值，而是把读取到的数据中的日期从早到晚遍历，减少计算量。
3.按照日期对所有交易细节输出为对应的f'{name}交易细节.csv'
4.按照日期对平均收益率和净资产走势输出为对应的f'{name}收益率和净资产收益率.csv'
三、补充说明
参考资料有bug适度参考，参考链接里面的牛市、熊市、震荡四个文件夹说明了本身牛熊转换的业务逻辑，但是他只是在分别分日交易，不能针对某天做单独的交易，但是他生成的交易细节和资产收益表是我想呀要的格式
参考链接：
https://github.com/bithomeswap/quant/tree/master/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86


参考代码：
import pandas as pd

# 数据库中的表格
data = pd.read_csv('database.csv')

# 计算所有股票的 ['EMA121开盘比值'] 的乘积
p = data.groupby('日期')['EMA121开盘比值'].prod()

# 遍历日期
for date in p.index:
    # 获取当天的股票数据
    df = data[data['日期'] == date].reset_index(drop=True)
    # 获取 ['EMA121开盘比值'] 的乘积
    product = p[date]
    # 定义一个交易细节的列表，用于存放每个股票的交易细节
    trade_details_list = []
    for i in range(len(df)):
        stock_name = df.loc[i, '股票名称']
        # 根据 ['EMA121开盘比值'] 的乘积判断当天使用哪种交易策略
        if product > 1.1:
            strategy = 'bull'
        elif product < 0.9:
            strategy = 'bear'
        else:
            strategy = 'shock'
        # 根据不同的策略调用不同的交易函数
        if strategy == 'bull':
            trade_details = bull_stock_trading(stock_name, df.loc[i])
        elif strategy == 'bear':
            trade_details = bear_stock_trading(stock_name, df.loc[i])
        else:
            trade_details = shock_stock_trading(stock_name, df.loc[i])
        # 将每支股票的交易细节添加到交易细节列表中
        trade_details_list.append(trade_details)
    # 将交易细节列表转换为 DataFrame，并输出为对应的 CSV 文件
    trade_details_df = pd.concat(trade_details_list).reset_index(drop=True)
    trade_details_df.to_csv(f'{date}交易细节.csv', index=False)
    # 计算平均收益率和净资产走势
    avg_profit, net_asset_trend = calculate_avg_profit_and_net_asset_trend(df, trade_details_df)
    # 将收益率和净资产走势输出为对应的 CSV 文件
    avg_profit.to_csv(f'{date}收益率.csv', index=False)
    net_asset_trend.to_csv(f'{date}净资产收益率.csv', index=False)

# 牛市交易函数
def bull_stock_trading(stock_name, row):
    # 请您根据实际情况编写牛市交易函数
    pass

# 熊市交易函数
def bear_stock_trading(stock_name, row):
    # 请您根据实际情况编写熊市交易函数
    pass

# 震荡交易函数
def shock_stock_trading(stock_name, row):
    # 请您根据实际情况编写震荡交易函数
    pass

# 计算平均收益率和净资产走势
def calculate_avg_profit_and_net_asset_trend(df, trade_details_df):
    # 请您根据实际情况编写计算平均收益率和净资产走势的函数
    pass
