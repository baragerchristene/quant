工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

一、注意事项：
1.尽量使用向量化计算，避免使用if语句和for循环，避免频繁使用解释器导致效率降低
2.所有的数据在数据库当中已经包含，不需要再次计算
3.直接给我完整代码
4.可以使用参考资料，但是不一定准确，请你批判的使用

二、规则说明
1.首先以日期分组，确定当日自制的成分股指数codes标的的['SMA121开盘比值']列的均值大于等于一，则标记为震荡策略，否则则标记为超跌
2.执行震荡策略时，要求先选取当天'开盘开盘幅'最大的百分之十（如果有小数就向下取整），再选取当天'开盘'最低的5只股票，且该股票满足开盘收盘幅在百分之八以内，百分之零以上的时候列入当日交易标的；
3.执行超跌策略时，要求先排除SMA121开盘比值在0.8以下的数据，然后选取当天'开盘开盘幅'最大的百分之十（如果有小数就向下取整），再选取当天'160日最高开盘价比值'最低的5只股票，且该股票满足开盘收盘幅在百分之八以内，百分之零以上的时候列入当日交易标的；
3.按照日期将所有交易标的细节输出为对应一个的f'{name}交易细节.csv'
4.按照日期将平均收益率、净资产走势、当日执行策略等数据输出为对应的一个f'{name}收益率和净资产收益率.csv'

注意参考初始资金和手续费设置的内容
一、参考资料
import math
import pandas as pd
import os

name = 'COIN'
# name = 'STOCK'
# name = 'COIN止损'
# name = 'STOCK止损'

# 获取当前.py文件的绝对路径
file_path = os.path.abspath(__file__)
# 获取当前.py文件所在目录的路径
dir_path = os.path.dirname(file_path)
# 获取当前.py文件所在目录的上三级目录的路径
dir_path = os.path.dirname(os.path.dirname(
    os.path.dirname(dir_path)))
file_path = os.path.join(dir_path, f'{name}指标.csv')
df = pd.read_csv(file_path)

# 获取自制成分股指数
code_count = len(df['代码'].drop_duplicates())
n_stock = code_count // 10
codes = df.groupby('代码')['成交额'].mean().nlargest(n_stock).index.tolist()
df = df[df['代码'].isin(codes)]
print("自制成分股指数为：", codes)

# 计算每个交易日的'SMA121开盘比值'均值
df_mean = df.groupby('日期')['SMA121开盘比值'].mean().reset_index(name='均值')

# 根据规则对每个交易日进行标注
df_mean['策略'] = df_mean['均值'].apply(lambda x: '震荡策略' if x >= 1 else '超跌策略')

# 输出到csv文件
df_mean.to_csv(f'{name}牛熊特征.csv', index=False)


# 实现震荡策略
def oscillating_strategy(df):
    # 先选取当天'开盘开盘幅'最大的百分之十
    n_top = math.floor(len(df) * 0.1)
    df = df.sort_values(by='开盘开盘幅', ascending=False).iloc[:n_top]

    # 再选取当天'开盘'最低的5只股票，且该股票满足开盘收盘幅在百分之八以内，百分之零以上的时候列入当日交易标的
    df = df.sort_values(by='开盘', ascending=True).iloc[:5]
    df = df[(df['开盘收盘幅'] <= 8) & (df['开盘收盘幅'] >= 0)]

    return df


# 实现超跌策略
def oversold_strategy(df):
    # 先排除SMA121开盘比值在0.8以下的数据
    df = df[df['SMA121开盘比值'] >= 0.8]

    # 然后选取当天'开盘开盘幅'最大的百分之十
    n_top = math.floor(len(df) * 0.1)
    df = df.sort_values(by='开盘开盘幅', ascending=False).iloc[:n_top]

    # 再选取当天'160日最高开盘价比值'最低的5只股票，且该股票满足开盘收盘幅在百分之八以内，百分之零以上的时候列入当日交易标的
    df = df.sort_values(by='160日最高开盘价比值', ascending=True).iloc[:5]
    df = df[(df['开盘收盘幅'] <= 8) & (df['开盘收盘幅'] >= 0)]

    return df




注意：初始资金和手续费设置
# 假设开始时有10000元资金,实操时每个月还得归集一下资金，以免收益不平均
cash_balance = 10000
# 用于记录每日的资金余额
daily_cash_balance = {}
n = 1
# 设置持仓周期
m = 0
# 设置手续费

df_strategy = pd.DataFrame(columns=['日期', '执行策略'])
df_daily_return = pd.DataFrame(columns=['日期', '收益率'])

cash_balance_list = []
# 记录每个交易日是否执行了策略，并输出到csv文件中
for date, group in df.groupby('日期'):
    # 如果当日没有入选标的，则单日收益率为0
    if group.empty:
        daily_return = 0
    else:
        daily_return = (group[f'{n}日后总涨跌幅（未来函数）'] +
                        100).mean()*(1-m)/100-1  # 计算平均收益率
    df_daily_return = pd.concat(
        [df_daily_return, pd.DataFrame({'日期': [date], '收益率': [daily_return]})])
    # 更新资金余额并记录每日资金余额
    cash_balance *= (1 + daily_return)
    daily_cash_balance[date] = cash_balance
    cash_balance_list.append(cash_balance)  # 添加每日资金余额到列表中
df_cash_balance = pd.DataFrame(
    {'日期': list(daily_cash_balance.keys()), '资金余额': list(daily_cash_balance.values())})
df_strategy_and_return = pd.merge(df_daily_return, df_cash_balance, on='日期')
# 输出每日执行策略和净资产收益率到csv文件
df_strategy_and_return.to_csv(f'{name}每日策略和资产状况.csv', index=False)
